{"version":3,"sources":["serviceWorker.js","hooks/useFetch.js","components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","useFetch","url","useState","data","setData","error","setError","useEffect","a","fetch","res","json","deets","Card","monster","className","alt","src","id","name","gender","CardList","monsters","map","key","SearchBox","placeholder","handleTextChange","type","onChange","App","searchText","setSearchText","filteredMonsters","filter","toLowerCase","includes","event","target","value","ReactDOM","render","StrictMode","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCCGSC,EAnBE,SAACC,GAAS,IAAD,EACAC,mBAAS,IADT,mBACjBC,EADiB,KACXC,EADW,OAEEF,mBAAS,MAFX,mBAEjBG,EAFiB,KAEVC,EAFU,KAgBxB,OAZAC,qBAAU,YACR,uCAAC,WAAON,GAAP,iBAAAO,EAAA,+EAEqBC,MAAMR,GAF3B,cAESS,EAFT,gBAGuBA,EAAIC,OAH3B,OAGSC,EAHT,OAIGR,EAAQQ,GAJX,kDAMGN,EAAS,EAAD,IANX,0DAAD,sDAQGL,KACF,CAACA,IAEG,CAACE,EAAME,ICdVQ,G,MAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACd,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAQI,GAAlC,4BAEL,4BAAKJ,EAAQK,MACb,2BAAIL,EAAQM,WCPZC,G,MAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OACE,yBAAKP,UAAU,aACZO,EAASC,KAAI,SAACT,GAAD,OACZ,kBAAC,EAAD,CAAMU,IAAKV,EAAQI,GAAIJ,QAASA,UCLlCW,G,MAAY,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,iBAChC,OACE,6BACE,2BACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,OCoBHG,G,MAxBH,WAAO,IAAD,EACG9B,EAAS,0CAArBsB,EADS,sBAEoBpB,mBAAS,IAF7B,mBAET6B,EAFS,KAEGC,EAFH,KAIVC,EAAmBX,EAASY,QAAO,SAACpB,GAAD,OACvCA,EAAQK,KAAKgB,cAAcC,SAASL,EAAWI,kBAOjD,OACE,yBAAKpB,UAAU,OACb,gDACA,kBAAC,EAAD,CACEW,YAAY,kBACZC,iBAToB,SAACU,GACzBL,EAAcK,EAAMC,OAAOC,UAUzB,kBAAC,EAAD,CAAUjB,SAAUW,O,MCnB1BO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,cAAc,UNsHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.c656f8fd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    (async (url) => {\r\n      try {\r\n        const res = await fetch(url);\r\n        const deets = await res.json();\r\n        setData(deets);\r\n      } catch (err) {\r\n        setError(err);\r\n      }\r\n    })(url);\r\n  }, [url]);\r\n\r\n  return [data, error];\r\n};\r\n\r\nexport default useFetch;\r\n","import React from 'react';\r\n\r\nimport './Card.scss';\r\n\r\nconst Card = ({ monster }) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        alt=\"monster\"\r\n        src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\r\n      />\r\n      <h2>{monster.name}</h2>\r\n      <p>{monster.gender}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Card as default };\r\n","import React from 'react';\r\nimport Card from '../Card/Card';\r\n\r\nimport './CardList.scss';\r\n\r\nconst CardList = ({ monsters }) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { CardList as default };\r\n","import React from 'react';\r\n\r\nimport './SearchBox.scss';\r\n\r\nconst SearchBox = ({ placeholder, handleTextChange }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        className=\"search\"\r\n        type=\"search\"\r\n        placeholder={placeholder}\r\n        onChange={handleTextChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { SearchBox as default };\r\n","import React, { useState } from 'react';\r\nimport useFetch from '../hooks/useFetch';\r\nimport CardList from './CardList/CardList';\r\nimport SearchBox from './SearchBox/SearchBox';\r\n\r\nimport './App.scss';\r\n\r\nconst App = () => {\r\n  const [monsters] = useFetch('https://ghibliapi.herokuapp.com/people');\r\n  const [searchText, setSearchText] = useState('');\r\n\r\n  const filteredMonsters = monsters.filter((monster) =>\r\n    monster.name.toLowerCase().includes(searchText.toLowerCase())\r\n  );\r\n\r\n  const searchTextHandler = (event) => {\r\n    setSearchText(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Monsters Rolodex</h1>\r\n      <SearchBox\r\n        placeholder=\"Search Monsters\"\r\n        handleTextChange={searchTextHandler}\r\n      />\r\n      <CardList monsters={filteredMonsters} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}